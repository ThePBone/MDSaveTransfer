@page "/tools"
@using MDSaveTransfer.Data
@using BlazorDownloadFile
@using System.Diagnostics

<PageTitle>Tools</PageTitle>

<h2>Tools</h2>

<BSModal @ref="ErrorModal" IsCentered="true" IsScrollable="true">
    <Header>Conversion failed</Header>
    <Content>
        <p>
            Did you select the correct save file?
        </p>
        <p>
            @(_errorMessage)
        </p>
        <pre>
            @(_errorDescription)
        </pre>
    </Content>
    <Footer Context="modal">
        <BSButton MarginStart="Margins.Auto" Color="BSColor.Danger" @onclick="modal.HideAsync">Close</BSButton>
    </Footer>
</BSModal>

<BSCard CardType="CardType.Card" Class="mb-4">
    <BSCard CardType="CardType.Body">
        <BSCard CardType="CardType.Title">Convert PC save file (*.sav) to JSON</BSCard>
        <BSCard CardType="CardType.Text" style="margin-bottom: 0 !important">
            Useful for debugging or manual editing. The binary save file (PC version) uses C# type references to ensure type-safety. The generated JSON file (*.odin.json) will preserve the exact file structure and type system. 
            <BSForm @ref="ToJsonForm" Gutters="Gutters.Medium" IsBasic="true" Class="mt-2">
                <BSInputFile IsRequired="true" ValidWhen="@(() => true)" OnChange="OnSavFileChange" style="max-width: 700px"/>
            </BSForm>
        </BSCard>
    </BSCard>
</BSCard>

<BSCard CardType="CardType.Card" Class="mb-4">
    <BSCard CardType="CardType.Body">
        <BSCard CardType="CardType.Title">Convert JSON back to PC save file (*.sav)</BSCard>
        <BSCard CardType="CardType.Text" style="margin-bottom: 0 !important">
            Converts a JSON file (*.odin.json) generated by this tool back to a regular binary PC save file.
            <BSForm @ref="ToBinForm" Gutters="Gutters.Medium" IsBasic="true" Class="mt-2">
                <BSInputFile IsRequired="true" ValidWhen="@(() => true)" OnChange="OnJsonFileChange" style="max-width: 700px"/>
            </BSForm>
        </BSCard>
    </BSCard>
</BSCard>

@code {

    [Inject] IBlazorDownloadFileService DownloadService { get; set; } = null!;

    private BSForm<bool> ToBinForm { set; get; } = null!;
    private BSForm<bool> ToJsonForm { set; get; } = null!;

    private BSModal ErrorModal { set; get; } = null!;
    private string _errorDescription = "";
    private string _errorMessage = "";
    
    private async Task OnSavFileChange(InputFileChangeEventArgs e)
    {
        if (e.FileCount <= 0) return;
        await ConvertTo(e.File, SaveDataFormat.TypesafeJson);
        ToJsonForm.Reset();
    }    
    
    private async Task OnJsonFileChange(InputFileChangeEventArgs e)
    {
        if (e.FileCount <= 0) return;
        await ConvertTo(e.File, SaveDataFormat.Binary);
        ToBinForm.Reset();
    }

    private async Task ConvertTo(IBrowserFile file, SaveDataFormat targetFormat)
    {
        Trace.Assert(targetFormat != SaveDataFormat.SimplifiedJson);
        try
        {
            var sourceFormat = targetFormat == SaveDataFormat.Binary ? SaveDataFormat.TypesafeJson : SaveDataFormat.Binary;
            var targetExt = targetFormat == SaveDataFormat.Binary ? "sav" : "odin.json";
            
            var readStream = new MemoryStream();
            await file.OpenReadStream(52428800 /* 50MB max */).CopyToAsync(readStream);
            readStream.Seek(0, SeekOrigin.Begin);
            
            var data = new SaveData(readStream, sourceFormat);
            readStream.Close();
            
            var newName = Path.GetFileName(file.Name);
            using var writeStream = new MemoryStream();
            data.Export(writeStream, targetFormat);
            await DownloadService.DownloadFile($"{newName}.{targetExt}", writeStream.GetBuffer(), "application/octet-stream");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine(ex);
            _errorMessage = ex.Message;
            _errorDescription = ex.ToString();
            await ErrorModal.ShowAsync();
        }
    }
}